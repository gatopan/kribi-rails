<% unless target_day %>
  <div class='row'>
    <div class='col-md-2 col-md-offset-5'>
      <h2>Please select an initial day</h2>
      <form
        action="<%= self.send("batch_show_#{children_model.table_name}_batch_index_path") %>"
        method="GET"
      >
        <br />
        <div
          class="input-group input-group-sm date"
          <% datetime_picker_id = SecureRandom.hex %>
          id="datetime-picker-<%= datetime_picker_id %>"
        >
          <input
            name="target_day"
            type='text'
            class="form-control"
            value='<%= target_day ? children_model.target_day.utc.strftime("%d/%m/%Y") : '' %>'
          />
          <span class="input-group-addon">
            <span class="glyphicon glyphicon-calendar"></span>
          </span>
          <span><button>Change</button></span>
          <script type="text/javascript">
            $(function () {
              $('<%= "#datetime-picker-#{datetime_picker_id}" %>').datetimepicker({
                format: 'DD/MM/YYYY',
                minDate: false,
                maxDate: new Date('<%= DateTime.now.utc.strftime("%Y-%m-%d") %>T00:00:00Z'),
              });
              <%# TODO: implement above max date check in backend %>
            });
          </script>
        </div>
      </form>
    </div>
  </div>
<% else %>
  <div class='col-md-12'>
    <h1><%= children_model::CUSTOM_NAME || children_model.table_name.titleize %></h1>
    <h3>
      Current Records Date (<%= target_day.utc.strftime("%d/%m/%Y") %>) 
      <a class='date-changer-toggler' href='#'>Change</a>
    </h3>

    <div class='date-changer-form'>
      <div
        class="input-group input-group-sm date"
        <% datetime_picker_id = SecureRandom.hex %>
        id="datetime-picker-<%= datetime_picker_id %>"
      >
        <input
          type='text'
          class='form-control date-changer-date'
          value='<%= target_day.utc.strftime("%d/%m/%Y") %>'
        />
        <span class="input-group-addon">
          <span class="glyphicon glyphicon-calendar"></span>
        </span>
        <span>
          <button class='date-changer-button'>Change</button>
        </span>
        <script type="text/javascript">
          $(function () {
            var target_element = $('<%= "#datetime-picker-#{datetime_picker_id}" %>');

            target_element.datetimepicker({
              format: "DD/MM/YYYY",
              useCurrent: false,
              minDate: new Date('<%= children_model.first.target_datetime.utc.strftime("%Y-%m-%d") %>T00:00:00Z'),
              maxDate: new Date('<%= (children_model.target_day.utc+1.day).strftime("%Y-%m-%d") %>T00:00:00Z'),
              disabledDates: [new Date('<%= children_model.first.target_datetime.utc.strftime("%Y-%m-%d") %>T00:00:00Z')],
              defaultDate: new Date('<%= (children_model.target_day.utc).utc.strftime("%Y-%m-%d") %>T00:00:00Z')
            });
          });
        </script>
      </div>
    </div>

    <% if children_model.is_resettable? %>
      <h4>Show reset/offset options: <input type="checkbox" name="showResetOptions" id="toggle-reset"></h4>
    <% end %>
  </div>

  <div class='col-md-12'>
    <table>
      <thead>
        <tr>
          <% case children_model::INTERVAL_USER_INTERFACE_MODE %>
          <% when :point %>
            <th></th>
          <% when :vector %>
            <th></th>
            <th></th>
          <% else %>
            <% raise StandardError.new("Interval user interface mode not implemented: #{children_model::INTERVAL_USER_INTERFACE_MODE} for #{children_model}") %>
          <% end %>
          <% if parents.length == 1 %>
            <th></th>
          <% else %>
            <% parents.each do |parent| %>
              <th colspan="<%= children_attributes.count %>"><%= "#{parent_model.to_s.humanize} #{parent.id}" %></th>
            <% end %>
          <% end %>
        </tr>
        <tr>
          <% case children_model::INTERVAL_USER_INTERFACE_MODE %>
          <% when :point %>
            <th>Time</th>
          <% when :vector %>
            <th colspan='2'>Period</th>
          <% else %>
            <% raise StandardError.new("Interval user interface mode not implemented: #{children_model::INTERVAL_USER_INTERFACE_MODE} for #{children_model}") %>
          <% end %>
          <% parents.each do |parent| %>
            <% children_attributes.each do |options| %>
              <th><%= label_tag(options[:attribute], options[:custom_name], class: (options[:class] =~ /reset-toggleable/ ? 'reset-toggleable' : '')) %></th>
            <% end %>
          <% end %>
        </tr>
      </thead>
      <tbody>
        <% combined_target_datetimes.each do |target_datetime| %>
          <tr>
            <% case children_model::INTERVAL_USER_INTERFACE_MODE %>
            <% when :point %>
              <% hour             = target_datetime.hour + (children_model::INTERVAL_USER_INTERFACE_OFFSET / 60) %>
              <% minute           = (target_datetime.minute + (children_model::INTERVAL_USER_INTERFACE_OFFSET % 60) % 60 ) %>
              <td><%= "#{hour.to_s.rjust(2, '0')}:#{minute.to_s.rjust(2, '0')}" %></td>
            <% when :vector %>
              <% ending_hour      = target_datetime.hour + (children_model::INTERVAL_USER_INTERFACE_OFFSET / 60) %>
              <% ending_minute    = (target_datetime.minute + (children_model::INTERVAL_USER_INTERFACE_OFFSET % 60) % 60 ) %>
              <% starting_hour    = ending_hour - children_model::INTERVAL_IN_MINUTES / 60 %>
              <% starting_minute  = (ending_minute - (children_model::INTERVAL_IN_MINUTES % 60) % 60) %>
              <td><%= "#{(starting_hour % 24).to_s.rjust(2, '0')}:#{starting_minute.to_s.rjust(2, '0')}-" %></td>
              <td><%= "#{ending_hour.to_s.rjust(2, '0')}:#{ending_minute.to_s.rjust(2, '0')}" %></td>
            <% else %>
              <% raise StandardError.new("Interval user interface mode not implemented: #{children_model::INTERVAL_USER_INTERFACE_MODE} for #{children_model}") %>
            <% end %>
            <% parents.each do |parent| %>

              <%# child element picking %>
              <% compatible_children = combined_children.select{|child| (child.parent_record == parent) && (child.target_datetime == target_datetime)} %>
              <%# <% raise StandardError.new('Should have found a child') if compatible_children.length != 1 %>
              <% binding.pry if compatible_children.length != 1 %>
              <% child = compatible_children[0] %>

              <%# previous day child test %>
              <% previous_day_child = previous_day_children.any? && (child.id == previous_day_children.max.id) %>

              <%# form element start %>
              <% if children.any? && child.id == children.min.id %>
                <form action="<%= self.send("batch_update_#{children_model.table_name}_batch_index_path") %>" method="POST" >
                  <input type="hidden" name="target_day" value="<%= target_day.utc.strftime("%d/%m/%Y") %>">
                  <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
              <% end %>

              <%# Form builder %>
              <%# We use rail's form helpers to take advantage of errors checking %>
              <%= fields_for "#{association_name(children_model, :plural)}[#{child.id}]", child do |child_form| %>
                <% children_attributes.each do |options| %>
                  <td class='<%= 'active_attribute' if previous_day_children.exclude?(child) && !(options[:class] =~ /reset-toggleable/) %>'>
                    <% options[:disabled] = previous_day_children.include?(child) || child.APPROVED? %>
                    <% case options[:builder] %>
                    <% when :text_field %>
                      <%= child_form.send(options.delete(:builder), options.delete(:attribute), options) %>
                    <% when :select %>
                      <%= child_form.send(options.delete(:builder), options.delete(:attribute), options.delete(:possible_values), {}, options) %>
                    <% else %>
                      <% raise StandardError.new('Builder type for form not implemented') %>
                    <% end %>
                  </td>
                <% end %>
              <% end %>

              <%# form element end %>
              <% if children.any? && child.id == children.max.id %>
                </tr>
                  <td>
                  </td>
                <tr>
              <% end %>

              <%# Previous day children and target day children separator %>
              <% if previous_day_child %>
                </tr>
                  <td>
                    <hr/>
                  </td>
                <tr>
              <% end %>

            <% end %>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
  <div class='col-md-4 col-md-offset-4 action-buttons'>
    <!-- <td> -->
    <!--  TODO: Implement Save and review, save and approve, etc.. -->
    <!-- </td> -->
    <h4>Actions:</h4>
    <%= submit_tag('Update') %>
    </form>
    |
    <form action="<%= self.send("batch_elevate_#{children_model.table_name}_batch_index_path") %>" method="POST" >
      <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
      <input type="hidden" name="target_day" value="<%= target_day.utc.strftime("%d/%m/%Y") %>">
      <select name='intended_status'>
        <% ['PENDING', 'REVIEWED', 'APPROVED'].each do |status| %>
          <option
            <%= status == @children.map(&:status).uniq.first ? 'SELECTED' : '' %>
            <%= current_person.allowed_statuses.include?(status) ? '' : 'DISABLED' %>
          ><%= status %></option>
        <% end %>
      </select>
      <button>Change Status</button>
    </form>
  </div>
<% end %>

<script>
  $(document).ready(function() {
    $('.date-changer-form').toggle();
    $('.date-changer-toggler').click(function(){
      $('.date-changer-form').toggle();
    });

    $('.date-changer-button').on('click', function(e){
      e.preventDefault();
      var target_date = $('.date-changer-date').val();
      var url = [location.protocol, '//', location.host, location.pathname].join('');
      window.location = (url + '?target_day=' + target_date);
    })

    $(".reset-toggleable").toggle();

    // TODO: hook this to toggle above, it's currently calling complete on each element, not cool.
    setTimeout(function(){
      $('input').autoGrowInput({ maxWidth: 999 });
    }, 2000);

    $( "#toggle-reset" ).on("click", {}, function(){
      $(".reset-toggleable").toggle();
    });

    // Disable enter key on forms
    $("input, select").keypress(function(event) {
      if (event.keyCode == 13) {
        event.preventDefault();

        $this = $(this).closest('.active_attribute');
        var parentRow     = $this.closest('tr');
        var position      = parentRow.find(".active_attribute").index($this);
        var targetElement = parentRow.next().find(".active_attribute").eq(position);

        if (targetElement.find("input, select").length === 0) {
          // NOTE: Hardcoded active attribute tr position
          var firstActiveAttributes = $("table").find("tbody").find("tr").eq(3).find(".active_attribute");
          var nextPosition = position + 1;

          if (nextPosition >= firstActiveAttributes.length) {
            var finalTargetElement = firstActiveAttributes.eq(0);
          } else {
            var finalTargetElement = firstActiveAttributes.eq(nextPosition);
          }
        } else {
          var finalTargetElement = targetElement;
        }

        var inputElement = finalTargetElement.find("input, select");
        inputElement.val("");
        inputElement.focus();

        return true;
      }
    });
  });
</script>
