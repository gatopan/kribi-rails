<div class='row'>
  <div class='col-md-4 text-left'>
    <h2><%= children_model.table_name.titleize %></h2>
  </div>
  <div class='col-md-4 text-center'>
    <h2><%= children_model.target_day.strftime("%d/%B/%Y") %></h2>
  </div>
  <div class='col-md-4 text-right'>
    <br/>
    <h4>Show reset/offset options: <input type="checkbox" name="showResetOptions" id="toggle-reset"></h4>
  </div>
  <div class='col-md-12'>
    <br />
  </div>
  <div class='col-md-12'>
    <%= form_tag(controller: params[:controller], action: 'batch_update') do %>
      <table class="table table-hover batch-readings">
        <thead>
          <tr>
            <th>Time</th>
            <% parents.each do |parent| %>
              <th><%= "#{parent_model.to_s.humanize} #{parent.id}" %></th>
            <% end %>
          </tr>
        </thead>
        <tbody>
          <% if previous_day_children.any? %>
            <% previous_day_children.each_with_index do |child, index| %>
              <% start_of_row = (child.target_datetime != previous_day_children[index-1].target_datetime) || ((index == 0) && (previous_day_children.length == parents.length)) %>
              <% end_of_row   = ((index % parents.length) == (parents.length-1)) %>

              <% if start_of_row %>
                <tr>
                  <th scope="row">
                    <div class='form-group'>
                      <p><%= child.target_datetime.strftime("%H:%M") %></p>
                    </div>
                  </th>
              <% end %>
                  <td>
                    <div class="form-group">
                      <%= fields_for "#{association_name(children_model, :plural)}[#{child.id}]", child do |child_form| %>
                        <% children_attributes.each do |options| %>
                          <%= label_tag(options[:custom_name] || options[:attribute]) %>
                          <% options[:disabled] = child.APPROVED? %>
                          <% case options[:builder] %>
                          <% when :text_field %>
                            <%= child_form.send(options.delete(:builder), options.delete(:attribute), options.merge(disabled: :disabled)) %>
                          <% when :select %>
                            <%= child_form.send(options.delete(:builder), options.delete(:attribute), options.delete(:possible_values), options.merge(disabled: :disabled)) %>
                          <% else %>
                            <% raise StandardError.new('Builder type for form not implemented') %>
                          <% end %>
                        <% end %>
                      <% end %>
                    </div>
                  </td>
              <% if end_of_row%>
                </tr>
              <% end %>
            <% end %>
          <% end %>

          <% children.each_with_index do |child, index| %>
            <% start_of_row = (child.target_datetime != children[index-1].target_datetime) || ((index == 0) && (children.length == parents.length)) %>
            <% end_of_row   = ((index % parents.length) == (parents.length-1)) %>

            <% if start_of_row %>
              <tr>
                <th scope="row">
                  <div class='form-group'>
                    <p><%= child.target_datetime.strftime("%H:%M") %></p>
                  </div>
                </th>
            <% end %>
                <td>
                  <div class="form-group">
                    <%= fields_for "#{association_name(children_model, :plural)}[#{child.id}]", child do |child_form| %>
                      <% children_attributes.each do |options| %>
                        <%= label_tag((options[:custom_name] || options[:attribute]), nil, class: (options[:class] =~ /reset-toggleable/ ? 'reset-toggleable' : '')) %>
                        <% options[:disabled] = child.APPROVED? %>
                        <% case options[:builder] %>
                        <% when :text_field %>
                          <%= child_form.send(options.delete(:builder), options.delete(:attribute), options) %>
                        <% when :select %>
                          <%= child_form.send(options.delete(:builder), options.delete(:attribute), options.delete(:possible_values), options) %>
                        <% else %>
                          <% raise StandardError.new('Builder type for form not implemented') %>
                        <% end %>
                      <% end %>
                    <% end %>
                  </div>
                </td>
            <% if end_of_row %>
              </tr>
            <% end %>
          <% end %>
        </tbody>
      </table>
      <p>Current statuses: <b><%= @children.map(&:status).uniq %></b></p>
      <p>Current role: <b><%= current_person.role %></b></p>
      <p>Target day: <b><%= children_model.target_day.strftime("%Y-%m-%d") %></b></p>
      <p><%= submit_tag('Update') %></p>
    <% end %>

    <!-- ELEVATE -->
    <form action="<%= self.send("batch_elevate_#{children_model.table_name}_batch_index_path") %>" method="POST" >
      <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
      <td>
        <div class="input-group input-group-sm">
          <select name="intended_status">
            <% ['PENDING', 'REVIEWED', 'APPROVED'].each do |status| %>
              <option
                <%= status == @children.map(&:status).uniq.first ? 'SELECTED' : '' %>
                <%= current_person.allowed_statuses.include?(status) ? '' : 'DISABLED' %>
              ><%= status %></option>
            <% end %>
          </select>
        </div>
      </td>
      <td><button>Elevate</button></td>
    </form>
  </div>
</div>

<script>
  $(".reset-toggleable").toggle();

  $( "#toggle-reset" ).on("click", {}, function(){
      $(".reset-toggleable").toggle();
  });
</script>
